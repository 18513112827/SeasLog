{"name":"Seaslog","tagline":"A effective,fast,stable log extension for PHP","body":"# SeasLog\r\nA effective,fast,stable log extension for PHP\r\n@author Chitao.Gao [neeke@php.net]\r\n\r\n> ---\r\n- **[简介](#简介)**\r\n    - **[为什么使用SeasLog](#为什么使用seaslog)**\r\n    - **[目前提供了什么](#目前提供了什么)**\r\n    - **[目标是怎样的](#目标是怎样的)**\r\n- **[安装](#安装)**\r\n    - **[编译安装 SeasLog](#编译安装-seaslog)**\r\n    - **[seaslog.ini的配置](#seaslogini的配置)**\r\n- **[使用](#使用)**\r\n    - **[常量与函数](#常量与函数)**\r\n        - [常量列表](#常量列表)\r\n        - [函数列表](#函数列表)\r\n\t- **[SeasLog Logger的使用](#seaslog-logger的使用)**\r\n        - [获取与设置basePath](#获取与设置basepath)\r\n        - [设置logger与获取lastLogger](#设置logger与获取lastlogger)\r\n        - [快速写入log](#快速写入log)\r\n\t- **[SeasLog Analyzer的使用](#seaslog-analyzer的使用)**\r\n\t\t- [快速统计某类型log的count值](#快速统计某类型log的count值)\r\n\t\t- [获取某类型log列表](#获取某类型log列表)\r\n\t- **[使用SeasLog进行健康预警](#使用seaslog进行健康预警)**\r\n        - [预警的配置](#预警的配置)\r\n\t\t- [crontab配置](#crontab配置)\r\n        \r\n> ---\r\n\r\n## 简介\r\n### 为什么使用SeasLog\r\nlog日志，通常是系统或软件、应用的运行记录。通过log的分析，可以方便用户了解系统或软件、应用的运行情况；如果你的应用log足够丰富，也可以分析以往用户的操作行为、类型喜好、地域分布或其他更多信息；如果一个应用的log同时也分了多个级别，那么可以很轻易地分析得到该应用的健康状况，及时发现问题并快速定位、解决问题，补救损失。\r\n\r\nphp内置error_log、syslog函数功能强大且性能极好，但由于各种缺陷(error_log无错误级别、无固定格式，syslog不分模块、与系统日志混合)，灵活度降低了很多，不能满足应用需求。\r\n\r\n好消息是，有不少第三方的log类库弥补了上述缺陷，如log4php、plog、Analog等(当然也有很多应用在项目中自己开发的log类)。其中以[log4php](http://logging.apache.org/log4php/)最为著名，设计精良、格式完美、文档完善、功能强大。推荐。(log4php的性能有待测试)\r\n\r\n那么有没有一种log类库满足以下需求呢：\r\n* 分模块、分级别\r\n* 配置简单(最好是勿须配置)\r\n* 日志格式清晰易读\r\n* 应用简单、性能很棒\r\n\r\n`SeasLog` 正是应此需求而生。\r\n\r\n### 目前提供了什么\r\n* 在PHP项目中便捷、规范地记录log\r\n* 可配置的默认log目录与模块\r\n* 指定log目录与获取当前配置\r\n* 初步的分析预警框架\r\n* 高效的日志缓冲、便捷的缓冲debug\r\n* 遵循 PSR-3 日志接口规范\r\n\r\n### 目标是怎样的\r\n* 便捷、规范的log记录\r\n* 高效的海量log分析\r\n* 可配置、多途径的log预警\r\n\r\n## 安装\r\n\r\n### 编译安装 seaslog\r\n```sh\r\n$ /path/to/phpize\r\n$ ./configure --with-php-config=/path/to/php-config\r\n$ make && make install\r\n```\r\n\r\n### seaslog.ini的配置\r\n```conf\r\n; configuration for php SeasLog module\r\nextension = seaslog.so\r\nseaslog.default_basepath = /log/seaslog-test    ;默认log根目录\r\nseaslog.default_logger = default                ;默认logger目录\r\nseaslog.disting_type = 1                        ;是否以type分文件 1是 0否(默认)\r\nseaslog.disting_by_hour = 1                     ;是否每小时划分一个文件 1是 0否(默认)\r\nseaslog.use_buffer = 1                          ;是否启用buffer 1是 0否(默认)\r\nseaslog.buffer_size = 100                       ;buffer中缓冲数量 默认0(不使用buffer_size)\r\nseaslog.level = 3                               ;记录日志级别 默认0(所有日志)\r\n```\r\n> `seaslog.disting_type = 1` 开启以type分文件，即log文件区分info\\warn\\erro\r\n\r\n> `seaslog.disting_by_hour = 1` 开启每小时划分一个文件\r\n\r\n> `seaslog.use_buffer = 1` 开启buffer。默认关闭。当开启此项时，日志预存于内存，当请求结束时(或异常退出时)一次写入文件。\r\n\r\n> `seaslog.buffer_size = 100` 设置缓冲数量为100. 默认为0,即无缓冲数量限制.当buffer_size大于0时,缓冲量达到该值则写一次文件.\r\n\r\n> 'seaslog.level = 3' 记录的日志级别.默认为0,即所有日志均记录。当level为1时,关注debug以上级别(包括debug)，以此类推。level大于8时，所有日志均不记录。\r\n## 使用\r\n\r\n### 常量与函数\r\n#### 常量列表\r\n`SeasLog 共将日志分成8个级别`\r\n* SEASLOG_DEBUG                       \"debug\"\r\n* SEASLOG_INFO                        \"info\"\r\n* SEASLOG_NOTICE                      \"notice\"\r\n* SEASLOG_WARNING                     \"warning\"\r\n* SEASLOG_ERROR                       \"error\"\r\n* SEASLOG_CRITICAL                    \"critical\"\r\n* SEASLOG_ALERT                       \"alert\"\r\n* SEASLOG_EMERGENCY                   \"emergency\"\r\n```php\r\nvar_dump(SEASLOG_DEBUG,SEASLOG_INFO,SEASLOG_NOTICE);\r\n/*\r\nstring('debug') debug级别\r\nstring('info')  info级别\r\nstring('notice') notice级别\r\n*/\r\n```\r\n#### 函数列表\r\n`SeasLog` 提供了这样一组函数，可以方便地获取与设置根目录、模块目录、快速写入与统计log。\r\n相信从下述伪代码的注释中，您可以快速获取函数信息，具体使用将紧接其后：\r\n```php\r\n<?php\r\n/**\r\n * @author ciogao@gmail.com\r\n * Date: 14-1-27 下午4:47\r\n */\r\n\r\nclass SeasLog\r\n{\r\n    public function __construct()\r\n    {\r\n        #SeasLog init\r\n    }\r\n\r\n    public function __destruct()\r\n    {\r\n        #SeasLog distroy\r\n    }\r\n\r\n    /**\r\n     * 设置basePath\r\n     * @param $basePath\r\n     * @return bool\r\n     */\r\n    static public function setBasePath($basePath)\r\n    {\r\n        return TRUE;\r\n    }\r\n\r\n    /**\r\n     * 获取basePath\r\n     * @return string\r\n     */\r\n    static public function getBasePath()\r\n    {\r\n        return 'the base_path';\r\n    }\r\n\r\n    /**\r\n     * 设置模块目录\r\n     * @param $module\r\n     * @return bool\r\n     */\r\n    static public function setLogger($module)\r\n    {\r\n        return TRUE;\r\n    }\r\n\r\n    /**\r\n     * 获取最后一次设置的模块目录\r\n     * @return string\r\n     */\r\n    static public function getLastLogger()\r\n    {\r\n        return 'the lastLogger';\r\n    }\r\n\r\n    /**\r\n     * 统计所有类型（或单个类型）行数\r\n     * @param $level\r\n     * @param string $log_path\r\n     * @return array | long\r\n     */\r\n    static public function analyzerCount($level = 'all',$log_path = '*')\r\n    {\r\n        return array();\r\n    }\r\n\r\n    /**\r\n     * 以数组形式，快速取出某类型log的各行详情\r\n     * @param $level\r\n     * @param string $log_path\r\n     * @return array\r\n     */\r\n    static public function analyzerDetail($level = SEASLOG_INFO,$log_path = '*')\r\n    {\r\n        return array();\r\n    }\r\n\r\n    /**\r\n     * 获得当前日志buffer中的内容\r\n     * @return array\r\n     */\r\n    static public function getBuffer()\r\n    {\r\n        return array();\r\n    }\r\n\r\n    /**\r\n     * 记录debug日志\r\n     * @param $message\r\n     * @param array $content\r\n     * @param string $module\r\n     */\r\n    static public function debug($message,array $content = array(),$module = '')\r\n    {\r\n        #$level = SEASLOG_DEBUG\r\n    }\r\n\r\n    /**\r\n     * 记录info日志\r\n     * @param $message\r\n     * @param array $content\r\n     * @param string $module\r\n     */\r\n    static public function info($message,array $content = array(),$module = '')\r\n    {\r\n        #$level = SEASLOG_INFO\r\n    }\r\n\r\n    /**\r\n     * 记录notice日志\r\n     * @param $message\r\n     * @param array $content\r\n     * @param string $module\r\n     */\r\n    static public function notice($message,array $content = array(),$module = '')\r\n    {\r\n        #$level = SEASLOG_NOTICE\r\n    }\r\n\r\n    /**\r\n     * 记录warning日志\r\n     * @param $message\r\n     * @param array $content\r\n     * @param string $module\r\n     */\r\n    static public function warning($message,array $content = array(),$module = '')\r\n    {\r\n        #$level = SEASLOG_WARNING\r\n    }\r\n\r\n    /**\r\n     * 记录error日志\r\n     * @param $message\r\n     * @param array $content\r\n     * @param string $module\r\n     */\r\n    static public function error($message,array $content = array(),$module = '')\r\n    {\r\n        #$level = SEASLOG_ERROR\r\n    }\r\n\r\n    /**\r\n     * 记录critical日志\r\n     * @param $message\r\n     * @param array $content\r\n     * @param string $module\r\n     */\r\n    static public function critical($message,array $content = array(),$module = '')\r\n    {\r\n        #$level = SEASLOG_CRITICAL\r\n    }\r\n\r\n    /**\r\n     * 记录alert日志\r\n     * @param $message\r\n     * @param array $content\r\n     * @param string $module\r\n     */\r\n    static public function alert($message,array $content = array(),$module = '')\r\n    {\r\n        #$level = SEASLOG_ALERT\r\n    }\r\n\r\n    /**\r\n     * 记录emergency日志\r\n     * @param $message\r\n     * @param array $content\r\n     * @param string $module\r\n     */\r\n    static public function emergency($message,array $content = array(),$module = '')\r\n    {\r\n        #$level = SEASLOG_EMERGENCY\r\n    }\r\n\r\n    /**\r\n     * 通用日志方法\r\n     * @param $level\r\n     * @param $message\r\n     * @param array $content\r\n     * @param string $module\r\n     */\r\n    static public function log($level,$message,array $content = array(),$module = '')\r\n    {\r\n\r\n    }\r\n}\r\n\r\n\r\n```\r\n\r\n### SeasLog Logger的使用\r\n#### 获取与设置basePath\r\n```php\r\n$basePath_1 = SeasLog::getBasePath();\r\n\r\nSeasLog::setBasePath('/log/base_test');\r\n$basePath_2 = SeasLog::getBasePath();\r\n\r\nvar_dump($basePath_1,$basePath_2);\r\n\r\n/*\r\nstring(19) \"/log/seaslog-ciogao\"\r\nstring(14) \"/log/base_test\"\r\n*/\r\n```\r\n> 直接使用 `SeasLog::getBasePath()`，将获取php.ini(seaslog.ini)中设置的 `seaslog.default_basepath` 的值。\r\n\r\n> 使用 `SeasLog::getBasePath()` 函数，将改变 `seaslog_get_basepath()` 的取值。\r\n\r\n#### 设置logger与获取lastLogger\r\n```php\r\n$lastLogger_1 = SeasLog::getLastLogger();\r\n\r\nSeasLog::setLogger('testModule/app1');\r\n$lastLogger_2 = SeasLog::getLastLogger();\r\n\r\nvar_dump($lastLogger_1,$lastLogger_2);\r\n/*\r\nstring(7) \"default\"\r\nstring(15) \"testModule/app1\"\r\n*/\r\n```\r\n> 与basePath相类似的，\r\n\r\n> 直接使用 `SeasLog::getLastLogger()`，将获取php.ini(seaslog.ini)中设置的 `seaslog.default_logger` 的值。\r\n\r\n> 使用 `SeasLog::setLogger()` 函数，将改变 `SeasLog::getLastLogger()` 的取值。\r\n\r\n#### 快速写入log\r\n上面已经设置过了basePath与logger，于是log记录的目录已经产生了，\r\n> log记录目录 = basePath / logger / {fileName}.log\r\nlog文件名，以 `年月日` 分文件，如今天是2014年02月18日期，那么 `{fileName}` = `20140218`;\r\n\r\n还记得 `php.ini` 中设置的 `seaslog.disting_type` 吗？\r\n\r\n默认的 `seaslog.disting_type = 0`，如果今天我使用了 `SeasLog` ，那么将产生最终的log文件：\r\n* LogFile = basePath / logger / 20140218.log\r\n\r\n如果 `seaslog.disting_type = 1`，则最终的log文件将是这样的三个文件\r\n* infoLogFile = basePath / logger / INFO.20140218.log\r\n\r\n* warnLogFile = basePath / logger / WARN.20140218.log\r\n\r\n* erroLogFile = basePath / logger / ERRO.20140218.log\r\n\r\n```php\r\n\r\nSeasLog::log(SEASLOG_ERROR,'this is a error test by ::log');\r\n\r\nSeasLog::debug('this is a {userName} debug',array('{userName}' => 'neeke'));\r\n\r\nSeasLog::info('this is a info log');\r\n\r\nSeasLog::notice('this is a notice log');\r\n\r\nSeasLog::warning('your {website} was down,please {action} it ASAP!',array('{website}' => 'github.com','{action}' => 'rboot'));\r\n\r\nSeasLog::error('a error log');\r\n\r\nSeasLog::critical('some thing was critical');\r\n\r\nSeasLog::alert('yes this is a {messageName}',array('{messageName}' => 'alertMSG'));\r\n\r\nSeasLog::emergency('Just now, the house next door was completely burnt out! {note}',array('{note}' => 'it`s a joke'));\r\n\r\n/*\r\n这些函数同时也接受第3个参数为logger的设置项\r\n注意，当last_logger == 'default'时等同于:\r\nSeasLog::setLogger('test/new/path');\r\nSeasLog::error('test error 3');\r\n如果已经在前文使用过SeasLog::setLogger()函数，第3个参数的log只在此处临时使用，不影响下文。\r\n*/\r\n```\r\n> log格式统一为： `{type} | {pid} | {timeStamp} |{dateTime} | {logInfo}`\r\n```sh\r\nerror | 23625 | 1406422432.786 | 2014:07:27 08:53:52 | this is a error test by ::log\r\n\r\ndebug | 23625 | 1406422432.786 | 2014:07:27 08:53:52 | this is a neeke debug\r\n\r\ninfo | 23625 | 1406422432.787 | 2014:07:27 08:53:52 | this is a info log\r\n\r\nnotice | 23625 | 1406422432.787 | 2014:07:27 08:53:52 | this is a notice log\r\n\r\nwarning | 23625 | 1406422432.787 | 2014:07:27 08:53:52 | your github.com was down,please rboot it ASAP!\r\n\r\nerror | 23625 | 1406422432.787 | 2014:07:27 08:53:52 | a error log\r\n\r\ncritical | 23625 | 1406422432.787 | 2014:07:27 08:53:52 | some thing was critical\r\n\r\nemergency | 23625 | 1406422432.787 | 2014:07:27 08:53:52 | Just now, the house next door was completely burnt out! it`s a joke\r\n\r\n```\r\n\r\n### SeasLog Analyzer的使用\r\n#### 快速统计某类型log的count值\r\n`SeasLog`在扩展中使用管道调用shell命令 `grep -wc`快速地取得count值，并返回值(array || int)给PHP。\r\n```php\r\n$countResult_1 = SeasLog::analyzerCount();\r\n$countResult_2 = SeasLog::analyzerCount(SEASLOG_WARNING);\r\n$countResult_3 = SeasLog::analyzerCount(SEASLOG_ERRO,date('Ymd',time()));\r\n\r\nvar_dump($countResult_1,$countResult_2,$countResult_3);\r\n/*\r\narray(8) {\r\n  [\"debug\"]=>\r\n  int(3)\r\n  [\"info\"]=>\r\n  int(3)\r\n  [\"notice\"]=>\r\n  int(3)\r\n  [\"warning\"]=>\r\n  int(3)\r\n  [\"error\"]=>\r\n  int(6)\r\n  [\"critical\"]=>\r\n  int(3)\r\n  [\"alert\"]=>\r\n  int(3)\r\n  [\"emergency\"]=>\r\n  int(3)\r\n}\r\n\r\n\r\nint(7)\r\n\r\nint(1)\r\n\r\n*/\r\n```\r\n#### 获取某类型log列表\r\n`SeasLog`在扩展中使用管道调用shell命令 `grep -w`快速地取得列表，并返回array给PHP。\r\n```php\r\n$detailErrorArray_inAll   = SeasLog::analyzerDetail(SEASLOG_ERRO);\r\n$detailErrorArray_today   = SeasLog::analyzerDetail(SEASLOG_ERRO,date('Ymd',time()));\r\n\r\nvar_dump($detailErrorArray_inAll,$detailErrorArray_today);\r\n\r\n/*\r\nSeasLog::analyzerDetail(SEASLOG_ERRO) == SeasLog::analyzerDetail(SEASLOG_ERRO,'*');\r\n取当前模块下所有level为 SEASLOG_ERRO 的信息列表:\r\narray(6) {\r\n [0] =>\r\n  string(66) \"ERRO | 8568 | 1393172042.717 | 2014:02:24 00:14:02 | test error 3 \"\r\n  [1] =>\r\n  string(66) \"ERRO | 8594 | 1393172044.104 | 2014:02:24 00:14:04 | test error 3 \"\r\n  [2] =>\r\n  string(66) \"ERRO | 8620 | 1393172044.862 | 2014:02:24 00:14:04 | test error 3 \"\r\n  [3] =>\r\n  string(66) \"ERRO | 8646 | 1393172045.989 | 2014:02:24 00:14:05 | test error 3 \"\r\n  [4] =>\r\n  string(66) \"ERRO | 8672 | 1393172047.882 | 2014:02:24 00:14:07 | test error 3 \"\r\n  [5] =>\r\n  string(66) \"ERRO | 8698 | 1393172048.736 | 2014:02:24 00:14:08 | test error 3 \"\r\n}\r\n\r\nSeasLog::analyzerDetail(SEASLOG_ERRO,date('Ymd',time()));\r\n只取得当前模块下，当前一天内,level为SEASLOG_ERRO 的信息列表:\r\narray(2) {\r\n  [0] =>\r\n  string(66) \"ERRO | 8568 | 1393172042.717 | 2014:02:24 00:14:02 | test error 3 \"\r\n  [1] =>\r\n  string(66) \"ERRO | 8594 | 1393172044.104 | 2014:02:24 00:14:04 | test error 3 \"\r\n}\r\n\r\n同理，取当月 \r\n$detailErrorArray_mouth = SeasLog::analyzerDetail(SEASLOG_ERRO,date('Ym',time()));\r\n\r\n*/\r\n```\r\n\r\n### 使用SeasLog进行健康预警\r\n#### 预警的配置\r\n```conf\r\n[base]\r\nwait_analyz_log_path = /log/base_test\r\n\r\n[fork]\r\n;是否开启多线程 1开启 0关闭\r\nfork_open = 1\r\n\r\n;线程个数\r\nfork_count = 3\r\n\r\n[warning]\r\nemail[smtp_host] = smtp.163.com\r\nemail[smtp_port] = 25\r\nemail[subject_pre] = 预警邮件 -\r\nemail[smtp_user] = seaslogdemo@163.com\r\nemail[smtp_pwd] = seaslog#demo\r\nemail[mail_from] = seaslogdemo@163.com\r\nemail[mail_to] = gaochitao@weiboyi.com\r\nemail[mail_cc] = ciogao@gmail.com\r\nemail[mail_bcc] =\r\n\r\n[analyz]\r\n; enum\r\n; SEASLOG_DEBUG      \"debug\"\r\n; SEASLOG_INFO       \"info\"\r\n; SEASLOG_NOTICE     \"notice\"\r\n; SEASLOG_WARNING    \"warning\"\r\n; SEASLOG_ERROR      \"error\"\r\n; SEASLOG_CRITICAL   \"critical\"\r\n; SEASLOG_ALERT      \"alert\"\r\n; SEASLOG_EMERGENCY  \"emergency\"\r\n\r\ntest1[module] = test/bb\r\ntest1[level] = SEASLOG_ERROR\r\ntest1[bar] = 1\r\ntest1[mail_to] = gaochitao@weiboyi.com\r\n\r\ntest2[module] = 222\r\ntest2[level] = SEASLOG_WARNING\r\n\r\ntest3[module] = 333\r\ntest3[level] = SEASLOG_CRITICAL\r\n\r\ntest4[module] = 444\r\ntest4[level] = SEASLOG_EMERGENCY\r\n\r\ntest5[module] = 555\r\ntest5[level] = SEASLOG_DEBUG\r\n\r\n```\r\n#### crontab配置\r\n```conf\r\n;每天凌晨3点执行\r\n0 3 * * * /path/to/php /path/to/SeasLog/Analyzer/SeasLogAnalyzer.php\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}